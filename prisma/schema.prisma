generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId      Int           @id @default(autoincrement())
  userName    String
  email       String?       @unique
  password    String?
  state1      String?
  state2      String?
  userImage   String
  score       Float         @default(0)
  reportCount Int           @default(0)
  kakao       BigInt?       @unique
  alarmOwner  Alarm[]       @relation("Owner")
  alarmSender Alarm[]       @relation("Sender")
  Chat        Chat[]
  Post        Post[]
  Report      Report[]
  roomOwner   Room[]        @relation("Owner")
  roomSender  Room[]        @relation("Sender")
  Score       Score[]
  SocketTable SocketTable[]
  Wish        Wish[]
  Token       Token[]
  PostImages  PostImages[]

  @@unique([userId, userName])
}

model Score {
  id     Int   @id @default(autoincrement())
  userId Int
  score  Float
  user   User  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], map: "Score_userId_fkey")
}

model Post {
  postId     Int          @id @default(autoincrement())
  userId     Int
  userName   String
  title      String
  content    String
  category   Int
  appointed  DateTime?
  isDeadLine Int?         @default(1)
  location1  String?
  location2  String?
  tag        String?
  createdAt  DateTime     @default(now())
  updated    Int          @default(0)
  Alarm      Alarm[]
  user       User         @relation(fields: [userId, userName], references: [userId, userName], onDelete: Cascade)
  Report     Report[]
  Room       Room[]
  Wish       Wish[]
  PostImages PostImages[]

  @@index([userId, userName], map: "Post_userId_userName_fkey")
}

model PostImages {
  imageId  Int     @id @default(autoincrement())
  post     Post    @relation(fields: [postId], references: [postId], onDelete: Cascade)
  user     User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  imageUrl String?
  postId   Int
  userId   Int
}

model Chat {
  chatId    Int      @id @default(autoincrement())
  roomId    String
  content   String
  createdAt DateTime @default(now())
  userId    Int
  isRead    Int      @default(0)
  Room      Room     @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([roomId], map: "Chat_roomId_fkey")
  @@index([userId], map: "Chat_userId_fkey")
}

model Room {
  roomId   String @id
  ownerId  Int
  senderId Int
  postId   Int
  leave    Int    @default(0)
  Chat     Chat[]
  owner    User   @relation("Owner", fields: [ownerId], references: [userId], onDelete: Cascade)
  Post     Post   @relation(fields: [postId], references: [postId], onDelete: Cascade)
  sender   User   @relation("Sender", fields: [senderId], references: [userId], onDelete: Cascade)

  @@index([ownerId], map: "Room_ownerId_fkey")
  @@index([postId], map: "Room_postId_fkey")
  @@index([senderId], map: "Room_senderId_fkey")
}

model SocketTable {
  socketId String @id
  userId   Int
  user     User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], map: "SocketTable_userId_fkey")
}

model Wish {
  postId Int
  userId Int
  post   Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([postId, userId])
  @@index([userId], map: "Wish_userId_fkey")
}

model Alarm {
  senderId Int
  ownerId  Int
  postId   Int
  count    Int  @default(0)
  user     User @relation("Owner", fields: [ownerId], references: [userId], onDelete: Cascade)
  post     Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
  sender   User @relation("Sender", fields: [senderId], references: [userId], onDelete: Cascade)

  @@id([postId, ownerId, senderId])
  @@index([ownerId], map: "Alarm_ownerId_fkey")
  @@index([senderId], map: "Alarm_senderId_fkey")
}

model Report {
  reportId  Int     @id @default(autoincrement())
  postId    Int
  reportNum Int
  reason    String?
  userId    Int
  post      Post    @relation(fields: [postId], references: [postId], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([postId], map: "Report_postId_fkey")
  @@index([userId], map: "Report_userId_fkey")
}

model Token {
  User         User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId       Int
  accessToken  String @db.LongText
  refreshToken String @db.LongText
  tokenId      Int    @id @default(autoincrement())
}
